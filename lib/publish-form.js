// Generated by CoffeeScript 1.12.3
(function() {
  var Emitter, PublishForm, View, TextEditorView, ref, $, $$, shell, VibloAPI,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Emitter = require('atom').Emitter, ref = require('atom-space-pen-views'), $$ = ref.$$, TextEditorView = ref.TextEditorView, View = ref.View;
  shell = require('electron').shell;
  VibloAPI = require('./viblo-api');
  $ = require('jquery');

  module.exports = PublishForm = (function(superClass) {
    extend(PublishForm, superClass);

    function PublishForm() {
      return PublishForm.__super__.constructor.apply(this, arguments);
    }

    PublishForm.prototype.initialize = function() {
      this.handleButtonEvents();
    };

    PublishForm.prototype.setContents = function(contents) {
      this.contents = contents;
      return this;
    }

    PublishForm.prototype.handleButtonEvents = function() {
      this.closeBtn.on('click', (function(_this) {
        return function() {
          return _this.hide();
        };
      })(this));

      this.publishBtn.on('click', (function(_this) {
        return function() {
          $('.body').addClass('request-loading')
          VibloAPI.publish({
            title:_this.titleInput.model.getText(),
            contents: _this.contents
          }).then((function(_that){
            return function(result) {
              $('.body').removeClass('request-loading');
              _that.contents = '';
              _that.titleInput.model.setText('');
              if (result.success) {
                var notification = atom.notifications.addWarning('Congratulations!', {
                  description: 'Post published',
                  detail: "Your post was published successfully",
                  dismissable: true,
                  buttons: [
                    {
                      text: 'Check your new post on Viblo',
                      onDidClick: function() {
                        // atom.commands.dispatch(atom.views.getView(atom.workspace), 'settings-view:view-installed-packages');
                        shell.openExternal("https://viblo.asia/user/posts/"+result.data.slug);
                        return notification.dismiss();
                      }
                    }
                  ]
                });
              } else {
                var errorMessage = '';
                if (result.errors) {
                  var errors = result.errors;
                  for (var errorName in errors) {
                    if( errors.hasOwnProperty(errorName) ) {
                      errorMessage += errors[errorName].slice(0,1)+"\n";
                    }
                  }
                } else {
                  errorMessage = result.statusText;
                }
                var notification = atom.notifications.addWarning('Validation errors', {
                  description: 'Please check validation messages above',
                  detail: errorMessage,
                  dismissable: true,
                  buttons: [
                    {
                      text: 'OK, I understand',
                      onDidClick: function() {
                        return notification.dismiss();
                      }
                    }
                  ]
                });
              }

              _that.hide();
            };
          })(_this));
        };
      })(this));
    }

    PublishForm.prototype.focus = function() {
      this.titleInput.focus();
    }

    PublishForm.prototype.on

    PublishForm.content = function(arg) {
      return this.div({
        tabindex: -1,
        'class' : 'body',
        outlet: 'publishForm'
      }, (function(_this) {
        return function() {
          _this.h1({
            'class': 'heading-title'
          }, 'Publishing post');

          _this.div({
            'class' : 'submit-loader'
          }, function() {
            _this.span({
              'class' : 'loading loading-spinner-large inline-block'
            })
            _this.h4({}, 'publishing in progress...')
          })

          return _this.div({
            'class': 'content'
          }, function() {
            _this.div({
              'class' : 'row'
            }, function() {
              _this.div({
                "class": 'editor-container'
              }, function() {
                return _this.subview('titleInput', new TextEditorView({
                  mini: true,
                  placeholderText: 'Post title'
                }));
              });
            });
            return _this.div({
              'class':'row'
            }, function() {
                _this.button({
                  'class' : 'btn btn-primary',
                  outlet: 'publishBtn'
                }, 'Publish');
                return _this.button({
                  'class' : 'btn btn-cancel',
                  outlet: 'closeBtn'
                }, 'Cancel');
            })
          })
        }
      })(this));
    };

    PublishForm.prototype.show = function() {

      this.emitter = new Emitter;

      if (!VibloAPI.getApiKey()) {
        var notification = atom.notifications.addWarning('Viblo API Warning', {
          description: 'Please refer to Viblo Social platform for registering new API key to publish your articles',
          detail: "Token is invalid",
          dismissable: true,
          buttons: [
            {
              text: 'Go to Viblo',
              onDidClick: function() {
                // atom.commands.dispatch(atom.views.getView(atom.workspace), 'settings-view:view-installed-packages');
                shell.openExternal("https://viblo.asia");
                return notification.dismiss();
              }
            }
          ]
        });

        return notification;
      }

      if (this.modalPanel == null) {
        this.modalPanel = atom.workspace.addModalPanel({
          item: this
        });
      }
      this.modalPanel.show();
      return this.titleInput.focus();
    };

    PublishForm.prototype.hide = function() {
      return this.modalPanel.hide();
    };

    PublishForm.prototype.toggle = function() {
      return this.modalPanel.visible ? this.hide() : this.show();
    };

    PublishForm.prototype.destroy = function() {
      var ref;
      if ((ref = this.modalPanel) != null) {
        ref.destroy();
      }
      this.modalPanel = null;
      return this.emitter.dispose();
    };

    return PublishForm;

  })(View);

}).call(this);
