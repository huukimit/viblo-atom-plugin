// Generated by CoffeeScript 1.12.3
(function() {
  var $, cheerio, fs, highlight, highlighter, imageWatcher, markdownIt, packagePath, pandocHelper, path, render, resourcePath, sanitize, scopeForFenceName, tokenizeCodeBlocks;

  path = require('path');

  cheerio = require('cheerio');

  fs = require('fs-plus');

  highlight = require('atom-highlight');

  $ = require('atom-space-pen-views').$;

  markdownIt = null;

  scopeForFenceName = require('./extension-helper').scopeForFenceName;

  highlighter = null;

  exports.toHTML = function(text, callback) {
    if (text == null) {
      text = '';
    }
    return render(text, function(error, html) {
      var defaultCodeLanguage;
      if (error != null) {
        return callback(error);
      }
      html = tokenizeCodeBlocks(html, defaultCodeLanguage);
      return callback(null, html);
    });
  };

  render = function(text, callback) {
    var callbackFunction;
    callbackFunction = function(error, html) {
      if (error != null) {
        return callback(error);
      }
      html = sanitize(html);
      return callback(null, html.trim());
    };

    if (markdownIt == null) {
      markdownIt = require('./markdown-it-helper');
    }
    return callbackFunction(null, markdownIt.render(text));
  };

  sanitize = function(html) {
    var attribute, attributesToRemove, i, len, o;
    o = cheerio.load(html);
    o("script:not([type^='math/tex'])").remove();
    attributesToRemove = ['onabort', 'onblur', 'onchange', 'onclick', 'ondbclick', 'onerror', 'onfocus', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onmousedown', 'onmousemove', 'onmouseover', 'onmouseout', 'onmouseup', 'onreset', 'onresize', 'onscroll', 'onselect', 'onsubmit', 'onunload'];
    for (i = 0, len = attributesToRemove.length; i < len; i++) {
      attribute = attributesToRemove[i];
      o('*').removeAttr(attribute);
    }
    return o.html();
  };

  tokenizeCodeBlocks = function(html, defaultLanguage) {
    var codeBlock, fenceName, fontFamily, highlightedBlock, highlightedHtml, i, len, o, preElement, ref, ref1, ref2;
    if (defaultLanguage == null) {
      defaultLanguage = 'text';
    }
    o = cheerio.load(html);
    if (fontFamily = atom.config.get('editor.fontFamily')) {
      o('code').css('font-family', fontFamily);
    }
    ref = o("pre");
    for (i = 0, len = ref.length; i < len; i++) {
      preElement = ref[i];
      codeBlock = o(preElement).children().first();
      fenceName = (ref1 = (ref2 = codeBlock.attr('class')) != null ? ref2.replace(/^(lang-|sourceCode )/, '') : void 0) != null ? ref1 : defaultLanguage;
      highlightedHtml = highlight({
        fileContents: codeBlock.text(),
        scopeName: scopeForFenceName(fenceName),
        nbsp: true,
        lineDivs: true,
        editorDiv: true,
        editorDivTag: 'pre',
        editorDivClass: 'editor-colors'
      });
      highlightedBlock = o(highlightedHtml);
      highlightedBlock.addClass("lang-" + fenceName);
      o(preElement).replaceWith(highlightedBlock);
    }
    return o.html();
  };

}).call(this);
