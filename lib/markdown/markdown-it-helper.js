// Generated by CoffeeScript 1.12.3
(function() {
  var getOptions, init, lazyHeaders, markdownIt, markdownItOptions, math, mathBlock, mathBrackets, mathDollars, mathInline, needsInit, renderLaTeX;

  markdownIt = null;

  markdownItOptions = null;

  renderLaTeX = null;

  math = null;

  lazyHeaders = null;

  mathInline = function(string) {
    return "<span class='math'><script type='math/tex'>" + string + "</script></span>";
  };

  mathBlock = function(string) {
    return "<span class='math'><script type='math/tex; mode=display'>" + string + "</script></span>";
  };

  mathDollars = {
    inlineOpen: '$',
    inlineClose: '$',
    blockOpen: '$$',
    blockClose: '$$',
    inlineRenderer: mathInline,
    blockRenderer: mathBlock
  };

  mathBrackets = {
    inlineOpen: '\\(',
    inlineClose: '\\)',
    blockOpen: '\\[',
    blockClose: '\\]',
    inlineRenderer: mathInline,
    blockRenderer: mathBlock
  };

  getOptions = function() {
    return {
      html: true,
      xhtmlOut: false,
      breaks: false,
      langPrefix: 'lang-',
      linkify: true,
      typographer: true
    };
  };

  init = function(rL) {
    renderLaTeX = rL;
    markdownItOptions = getOptions();
    markdownIt = require('markdown-it')(markdownItOptions);
    return markdownIt.use(require('markdown-it-lazy-headers'));
  };

  needsInit = function(rL) {
    return (markdownIt == null) || !lazyHeaders;
  };

  exports.render = function(text, rL) {
    if (needsInit(rL)) {
      init(rL);
    }
    return markdownIt.render(text);
  };

  exports.decode = function(url) {
    return markdownIt.normalizeLinkText(url);
  };

  exports.getTokens = function(text, rL) {
    if (needsInit(rL)) {
      init(rL);
    }
    return markdownIt.parse(text, {});
  };

}).call(this);
